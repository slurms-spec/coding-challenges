// Write a function that takes a list of strings as an argument and returns a filtered list containing the same elements but with the 'geese' removed.

// The geese are any strings in the following array, which is pre-populated in your solution:

 let geese =  ["African", "Roman Tufted", "Toulouse", "Pilgrim", "Steinbacher"]

 let bird = ["Mallard", "Hook Bill", "African", "Crested", "Pilgrim", "Toulouse", "Blue Swedish"]
 


//  function filterOutGeese(birbs){
//         let birdsNoGeese = []

//         for(let i = 0; i<birbs.length; i++){
//             if(!geese.includes(birbs[i])){
//                 birdsNoGeese.push(birbs[i])
//             }
//         }
//         console.log( birdsNoGeese)
//  }

 //filterOutGeese(bird)  // (4) ['Mallard', 'Hook Bill', 'Crested', 'Blue Swedish'] WIN




 // OR MORE SIMPLY ::


 let filteredBirds = bird.filter(e =>  !geese.includes(e))
// console.log(filteredBirds)  // (4) ['Mallard', 'Hook Bill', 'Crested', 'Blue Swedish'] WIN



//?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????////

// Description:

// In this simple assignment you are given a number and have to make it negative. But maybe the number is already negative?
// Examples

// makeNegative(1);    // return -1
// makeNegative(-5);   // return -5
// makeNegative(0);    // return 0
// makeNegative(0.12); // return -0.12

// function makeNegative(num){
//     return num < 0 ? num : -num
// }


//???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????///


// Description:

// Complete the square sum function so that it squares each number passed into it and then sums the results together.

// For example, for 
let array = [1, 2, 2]
// it should return 9 because 1^2 + 2^2 + 2^2 = 9.

// function squareSum(arr){
//     return arr.reduce((acc,curr) => acc + (curr*curr),0)


// }

// console.log(squareSum(array)) // 9 WIN


//???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????//



